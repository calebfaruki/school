Script started on Fri 16 Aug 2013 02:50:44 PM EDT
]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ exitcat Student.cc[1Ph[2PNode.cc[1PhList.cc. List.cc[2P List.h[3P./a.outg++ List.cc Node.cc Student.cc  main.cc
]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ g++ List.cc Node.cc Student.cc  main.cc[A]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ exit[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccat Student.cc[1Ph[2PNode.cc[1PhList.cc. List.cc[2P List.h[3P./a.outg++ List.cc Node.cc Student.cc  main.cc[A]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ ./a.out[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
List is empty. Inserting first Node.

{Hershel, A, Monsivals, 111-22-3333, 11}
{Lucila, B, Stearn, 222-33-4444, 12}
{Robbie, C, McCollum, 333-44-5555, 13}
{Dolores, D, Cooks, 444-55-6666, 14}
{Crystal, E, Ottman, 555-66-7777, 15}

Copy from head to tail? (y/n): y
Copying normally...

Done copying!

{Hershel, A, Monsivals, 111-22-3333, 11}
{Lucila, B, Stearn, 222-33-4444, 12}
{Robbie, C, McCollum, 333-44-5555, 13}
{Dolores, D, Cooks, 444-55-6666, 14}
{Crystal, E, Ottman, 555-66-7777, 15}

There are 5 Nodes in the List.
After which Node do you want to insert new Node?: 2

{Hershel, A, Monsivals, 111-22-3333, 11}
{Lucila, B, Stearn, 222-33-4444, 12}
{Josh, F, Ginsberg, 666-77-8888, 16}
{Robbie, C, McCollum, 333-44-5555, 13}
{Dolores, D, Cooks, 444-55-6666, 14}
{Crystal, E, Ottman, 555-66-7777, 15}

Record: Dolores found
Deleting...

{Crystal, E, Ottman, 555-66-7777, 15}
{Robbie, C, McCollum, 333-44-5555, 13}
{Josh, F, Ginsberg, 666-77-8888, 16}
{Lucila, B, Stearn, 222-33-4444, 12}
{Hershel, A, Monsivals, 111-22-3333, 11}

Destruction complete.
Destruction complete.
]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ ./a.out
List is empty. Inserting first Node.

{Hershel, A, Monsivals, 111-22-3333, 11}
{Lucila, B, Stearn, 222-33-4444, 12}
{Robbie, C, McCollum, 333-44-5555, 13}
{Dolores, D, Cooks, 444-55-6666, 14}
{Crystal, E, Ottman, 555-66-7777, 15}

Copy from head to tail? (y/n): n
Copying in reverse order...

Done copying!

{Crystal, E, Ottman, 555-66-7777, 15}
{Dolores, D, Cooks, 444-55-6666, 14}
{Robbie, C, McCollum, 333-44-5555, 13}
{Lucila, B, Stearn, 222-33-4444, 12}
{Hershel, A, Monsivals, 111-22-3333, 11}

There are 5 Nodes in the List.
After which Node do you want to insert new Node?: 3

{Crystal, E, Ottman, 555-66-7777, 15}
{Dolores, D, Cooks, 444-55-6666, 14}
{Robbie, C, McCollum, 333-44-5555, 13}
{Josh, F, Ginsberg, 666-77-8888, 16}
{Lucila, B, Stearn, 222-33-4444, 12}
{Hershel, A, Monsivals, 111-22-3333, 11}

Record: Dolores found
Deleting...

{Hershel, A, Monsivals, 111-22-3333, 11}
{Lucila, B, Stearn, 222-33-4444, 12}
{Josh, F, Ginsberg, 666-77-8888, 16}
{Robbie, C, McCollum, 333-44-5555, 13}
{Crystal, E, Ottman, 555-66-7777, 15}

Destruction complete.
Destruction complete.
]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ ./a.outg++ List.cc Node.cc Student.cc  main.cc[A]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ exit[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccat Student.cc[1Ph[2PNode.cc[1PhList.cc. List.cc[2P List.h
/**********************************************************************
* Name: Caleb Faruki
* Lab5: Linked List II
* Course: Data Structures
* Date: July 17, 2013
* File: List Class
**********************************************************************/
#ifndef LIST_H
#define LIST_H

#include <iostream>
#include "Student.h"
#include "Node.h"
using namespace std;

class List {

public:
    List(); // Default constructor
    List(const List&); // Copy constructor (2-in-1, see lab sheet)
    ~List(); // Destructor

    bool isEmpty(); // List is empty: TRUE or FALSE?
    int getNumNodes() {return numNodes;} // How many Nodes in List
    
    void append(Student *); // Append new Node to head or tail of List
    void insert(Student *); // Inserts new Node in the
                            // Appropriate location in List
    void deleteNode(string); //Search for and delete specific Node
    void displayAscending();// Display List HEAD to TAIL
    void displayDescending(); // Display List TAIL to HEAD

    // input Student::data into Student pointer.
    void input(Student*, string, string, string, string, string);

    Node *getHead() const {return head;} // ptr to head. 
    Node *getTail() const {return tail;} //ptr to tail.

    bool copyReverse(); //ask whether normal or reverse copy.
                       //intended for main before copy constructor.
private:
    void printer(Node *); //recursive function w/in displayDescending()
    Node *head;
    Node *tail;

    bool empty;
    bool forward; // forward = head-to-tail i.e. true
    int numNodes; // number of nodes in the list 
};

#endif]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ cat List.h[3P./a.outg++ List.cc Node.cc Student.cc  main.cc[A]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ exit[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccat Student.cc[1Ph[2PNode.cc[1PhList.cc
/**********************************************************************
* Name: Caleb Faruki
* Lab5: Linked List II
* Course: Data Structures
* Date: July 17, 2013
* File: List Class Implementation
**********************************************************************/
#include "List.h"

using namespace std;

List::List() {
    head = NULL;
    tail = NULL; // Head & tail point nowhere.

    empty = true; // List initialized as empty.
    forward = true; // Any new Nodes appended to tail.
    numNodes = 0; // Initial number of nodes
}

List::List(const List &aList): numNodes(aList.numNodes) {
    empty = true;
    forward = true;
    string flag;

    cout << "Copy from head to tail? (y/n): ";
    cin >> flag;
    if(flag=="n")
        forward = false;

    if(!aList.head) {
        head = NULL; //aList is empty. so is this->List.
        tail = NULL;
    } else { // copy 1st Node.
        head = new Node;
        if(forward)
            head->setData(aList.head->getData());
        else // copy in reverse.
            head->setData(aList.tail->getData());
        //copy rest of List.
        Node *newPtr = head; //newPtr points to last Node in new List.
        Node *newNode = NULL; //newNode points to each Node in new List.


        //origPtr points to nodes in original List.
        if(forward) {
            cout << "Copying normally...\n" << endl;
            for(Node *origPtr=aList.head->getNext(); origPtr!=NULL;
                origPtr=origPtr->getNext()) {
                newNode = new Node;
                newNode->setPrev(newPtr); // newNode prev pts to newPtr.
                newPtr->setNext(newNode); // newPtr next pts to newptr.
                newPtr = newPtr->getNext(); // newPtr = newNode.
                newPtr->setData(origPtr->getData()); //copy origPtr.
            } // end for
        } else { // for-loop "initialize" and "increment" fields changed.
            cout << "Copying in reverse order...\n" << endl;
            for(Node *origPtr=aList.tail->getPrev(); origPtr!=NULL;
                origPtr=origPtr->getPrev()) {
                newNode = new Node;
                newNode->setPrev(newPtr);
                newPtr->setNext(newNode);
                newPtr = newPtr->getNext();
                newPtr->setData(origPtr->getData());
            } // end for
        } // end if/else
        tail = newPtr; // after copying, tail set to newPtr.
        newPtr->setNext(NULL); // newPtr nullified
    } // end if/else
    cout << "Done copying!\n" << endl;
} // end copy constructor

List::~List() { // Deletes all nodes
    Node *curr = head;
    Node *prev = NULL;

    if(isEmpty()) {
        cout << "Empty List. No need to destroy." << endl;
    } else { // list not empty
        while(curr) { //traverse list to delete memory
            Node *temp = NULL; // TEMP points to CURR which points to HEAD
            temp = curr;
            if (prev) {
                prev->setNext(curr->getNext()); //set PREV node's NEXT to the NEXT of the CURR node.
            } else {
                head = curr->getNext(); //HEAD is the node NEXT to curr.
            } // end if/else

            curr = curr->getNext(); //move curr ptr to next node.
            delete temp; //delete TEMP which points to previous CURR.
            temp = NULL; //empty memory address contents.
        } // end while
        cout << "Destruction complete." << endl;
    } // end if/else
} // end destructor

bool List::isEmpty() {

    if (!head)  // No head means no nodes.
        empty = true;
    else
        empty = false; //head exists, thus list isn't empty.
    // end if/else

    return empty;
} // end isEmpty()

void List::append(Student *newStudent) {
    Node *newNode = new Node(newStudent); // new Node containing student arg.

    newNode->getData(); // get data of student arg.

    if(isEmpty()) {
    	cout << "List is empty. Inserting first Node.\n" << endl;
        head = newNode;
        tail = newNode; // new Node becomes head & tail.
    } else { 
    	if(forward) { // append to tail of list.
        	tail->setNext(newNode); // NEXT ptr of tail points to newNode.
        	newNode->setPrev(tail); // newNode's PREV points to former tail.
        	tail = newNode; // newNode becomes the new tail.
    	} else { // append as head of list.
    		head->setPrev(newNode); // PREV ptr of head points to newNode.
    		newNode->setNext(head); // newNode's NEXT points to former head.
    		head = newNode; // newNode becomes the new head.
    	} // end if/else
    } // end if/else
    numNodes++;
}

void List::insert(Student * newStudent) {
Node *curr = head; // Initialize for linear search.
int count = 1; // Count thru Nodes till desired position reached.
int position = numNodes;

	cout << "There are " << getNumNodes() << " Nodes in the List.\n"
		 << "After which Node do you want to insert new Node?: ";
	cin >> position;

    cout << endl;

    //Controls boundary exceptions
	if(position >= numNodes) {
		forward = true; // Append to tail.
		append(newStudent);
	} else if(position == 1) { // Position = 1
		forward = false; // Append before head.
		append(newStudent);
	} else {
    	while(count != position) {
	      	curr = curr->getNext(); // Traverse List.
	      	count++; // Increment number Node where CURR points.
	   } // end while

	   Node *newNode = new Node(newStudent);

	   newNode->getData();

	   if(count == position) { // curr points to desired Node.
            newNode->setPrev(curr); // link newNode to curr
		    newNode->setNext(curr->getNext()); // link newNode to curr's next node.
		    curr->getNext()->setPrev(newNode); // link curr's next ptr to newNode.
		    curr->setNext(newNode); // link curr's next ptr to newNode.
	    } // end if
    }
} // end insert()

void List::deleteNode(string f) {
    bool flag = false; // flag=true when name is found.
    Node *curr = head; // CURR pointing to head.
    Node *prev = NULL; // PREV pointing nowhere.

    if (!curr) 
        cout << "List is empty\n" << endl;
    else { // list isn't empty.
        while(curr && !flag) { // traverse the list for name.       
            if (curr->getData()->getFirst() == f) {
                cout << "Record: " << f << " found\n" 
                     << "Deleting...\n" << endl;
                flag = true; // true because Student was found.         
            } else {
                prev = curr; // Prev pts to curr Node.
                curr = curr->getNext();  // Curr pts to next Node.
            } // end if/else
        } // end while
    } // end if/else

    //name is found, delete name
    if(flag) { //unlink CURR from the list.
        //set PREV's next to CURR's next.
        prev->setNext(curr->getNext());
        //set NEXT prev to CURR prev.
        curr->getNext()->setPrev(curr->getPrev());
        delete curr; // delete curr.
        curr = NULL; // empty curr's address
        numNodes--;
    } // end if
} // end deleteNode()

void List::displayAscending() { // Iterative; takes HEAD as arg
    Node *curr = head;
    while(curr) {  // as long as curr isn't NULL
        curr->printNode(curr);
        curr = curr->getNext(); ///curr points to NEXT of THIS node.
    } // end while
    cout << endl;
} // end displayAscending()

void List::displayDescending() {
    printer(tail); // Pass tail node to recursive func. w/o inf. loop.
    cout << endl;
}

void List::printer(Node *curr) {
    if(curr) { // List isn't empty.
        curr->printNode(curr); // Print curr.
        printer(curr->getPrev()); // Call printer of node prev to CURR.
    }
}

void List::input(Student* stuPtr, string first, string mid, 
	string last, string ssn, string age) {
    stuPtr->setStudent(first, mid, last, ssn, age);
} // end input()]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ cat List.cc[1Ph[3P./a.outg++ List.cc Node.cc Student.cc  main.cc[A]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ exit[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccat Student.cc[1Ph[2PNode.cc[1Ph
/**********************************************************************
* Name: Caleb Faruki
* Lab5: Linked List II
* Course: Data Structures
* Date: July 17, 2013
* File: Node Class
**********************************************************************/

#ifndef NODE_H
#define NODE_H

#include "Student.h"

using namespace std;

class Node {

public:
    Node();
    Node(Student *);// new constructor that takes Student arg for data.

    Student *getData() {return data;} // gets Node data.
    void setData(Student*); // set Node data. 

    Node *getNext() {return next;} // gets whatever this Node pts to next.
    void setNext(Node*); // sets where this Node pts to next.

    Node *getPrev() {return prev;}// gets whatever this Node pts to prev.
    void setPrev(Node*);// sets where this Node pts to prev.

    void printNode(Node *); //print a particular Node.

private:
    Student *data;// student data member
    Node *next;// pointer-based node
    Node *prev;// pointer-prev node
};

#endif]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ cat Node.cc
/**********************************************************************
* Name: Caleb Faruki
* Lab5: Linked List II
* Course: Data Structures
* Date: July 17, 2013
* File: Node Class Implementation
**********************************************************************/
#include "Node.h"

using namespace std;

Node::Node() {
	data = NULL;
    next = NULL;
    prev = NULL;
} // end default constructor

Node::Node(Student * student) {
    setData(student);
    next = NULL;
    prev = NULL;
} // end new constructor w/ Student arg.

void Node::setData(Student * student) {
    data = student;
} // end setData()

void Node::setNext(Node * nextNode) {
    next = nextNode;
} // end setNext()

void Node::setPrev(Node * prevNode) {
    prev = prevNode;
} // end setPrev()

void Node::printNode(Node * node) {
	Node *curr = node;
    cout << "{"
         << curr->getData()->getFirst()  << ", "
         << curr->getData()->getMid()    << ", "
         << curr->getData()->getLast()   << ", "
         << curr->getData()->getSocial() << ", "
         << curr->getData()->getAge()    << "}" << endl;
} // end printNode()]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ cat Student.h
/**********************************************************************
* Name: Caleb Faruki
* Lab5: Linked List II
* Course: Data Structures
* Date: July 17, 2013
* File: Student Class
**********************************************************************/

#ifndef STUDENT_H
#define STUDENT_H

#include <iostream>

using namespace std;

class Student {

public:
	Student(); //default constructor.
	Student(const string&, const string&, const string&, 
		const string&, const string&); //new constructor.

	//setters
	void setStudent( const string&, const string&, const string&,
		const string&, const string& );
	void setName( const string&, const string&, const string& );
	void setSocial( const string& );
	void setAge( const string& );

	//getters
	string getFirst() {return stuData[0];}
	string getMid() {return stuData[1];}
	string getLast() {return stuData[2];}
	string getSocial() {return stuData[3];}
	string getAge() {return stuData[4];}

private:
	string stuData[5];
};

#endif]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ cat Student.cc
/**********************************************************************
* Name: Caleb Faruki
* Lab5: Linked List II
* Course: Data Structures
* Date: July 10, 2013
* File: Student Class Implementation
**********************************************************************/
#include "Student.h"

using namespace std;

Student::Student() {
	stuData[0] = "Firstname";
	stuData[1] = "MI";
	stuData[2] = "Lastname";
	stuData[3] = "SSN";
	stuData[4] = "Age";
} // end default constructor

Student::Student(const string & first, const string & mid,
	const string & last, const string & ssn, const string & age) {
	setStudent(first, mid, last, ssn, age);
} // end new constructor

void Student::setStudent( const string& first, const string& mid,
	 const string& last, const string& ssn, const string& age) {
	setName(first, mid, last);
	setSocial(ssn);
	setAge(age);
} // end setStudent()

void Student::setName(const string & first, const string & mid,
	const string & last) {
	stuData[0] = first;
	stuData[1] = mid;
	stuData[2] = last;
} // end setName()

void Student::setSocial(const string & ssn) {
	stuData[3] = ssn;
} // end setSocial()

void Student::setAge(const string & age) {
	stuData[4] = age;
} // end setAge()]0;faruki@ubuntu: ~/DataStructures/Lab5faruki@ubuntu:~/DataStructures/Lab5$ exit
exit

Script done on Fri 16 Aug 2013 02:51:46 PM EDT
