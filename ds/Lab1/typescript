Script started on Wed 12 Jun 2013 02:53:16 AM EDT
]0;caleb@laptop: ~/Data Structures/Lab1caleb@laptop:~/Data Structures/Lab1$ g++ -g -o HugeInt HugeInt.cc main.cc -lsstdc++[A]0;caleb@laptop: ~/Data Structures/Lab1caleb@laptop:~/Data Structures/Lab1$ ./HugeInt[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cg++ -g -o HugeInt HugeInt.cc main.cc -lsstdc++
]0;caleb@laptop: ~/Data Structures/Lab1caleb@laptop:~/Data Structures/Lab1$ cat HugeInt.h
/**********************************************************************
* Name: Caleb Faruki
* Lab1: Huge Integer
* Course: Data Structures
* Date: June 11, 2013
* File: HugeInt Header
**********************************************************************/
#ifndef HUGEINT_H
#define HUGEINT_H

#include <iostream>
#include <cstdlib>
#include <iomanip>

using namespace std;

class HugeInt {   

    friend ostream& operator << (ostream &, const HugeInt &);
    friend istream& operator >> (istream &, HugeInt &); //Not implemented

public:

    HugeInt();
    HugeInt(int[], int);

    bool operator == (const HugeInt &) const;
    bool operator != (const HugeInt &) const;
    bool operator > (const HugeInt &) const;
    bool operator < (const HugeInt &) const;

    HugeInt operator + (const HugeInt &);
    HugeInt operator - (const HugeInt &);
    HugeInt operator * (const HugeInt &);

    HugeInt print();

private:

    HugeInt add(const HugeInt &);
    HugeInt subtract(const HugeInt &);
    HugeInt multiply(const HugeInt &); //Not implemented

    HugeInt input(char);

    static const int sizeMax = 40;
    int array[sizeMax + 1];
    int size;

};

#endif]0;caleb@laptop: ~/Data Structures/Lab1caleb@laptop:~/Data Structures/Lab1$ cat HugeInt.cc
/**********************************************************************
* Name: Caleb Faruki
* Lab1: Huge Integer
* Course: Data Structures
* Date: June 11, 2013
* File: HugeInt Implementation
**********************************************************************/
#include "HugeInt.h"

using namespace std;

/*****************************Constructors****************************/

// Default constructor
HugeInt::HugeInt () {
    //Default all index values to 0
    for (int i = 0; i < sizeMax; i++)
	 array[i] = 0;

}

HugeInt::HugeInt (int arr[], int inputSize) {

    size = inputSize;

    //Validate that size <=40
    if (size > sizeMax)
        size = sizeMax;
    //Copy arr[] values to array[]
    for (int i = 0; i < size; i++)
        array[i] = arr[i];
    //Default to 0 for empty array indices
    for (int i = size; i < sizeMax; i++ )
        array[i] = 0;

    //Check for fencepost error
    for (int j = sizeMax - 1; j >= sizeMax - size; j--)
        array[j] = array[j - sizeMax + size];
    for (int k = 0; k < sizeMax - size; k++)
        array[k] = 0;

}

/***********************Output Stream Overload************************/

ostream &operator << (ostream &out, const HugeInt &a) {

    bool term = false;
    int count;

    //Remove excess zeroes
    for (int i = 0; i < a.sizeMax; i++) {
        if (a.array[i] != 0) {
            term = true;
            count = i;
            break;
        }
    }
    //Output remaining array
    for (int i = count; i < a.sizeMax; i++)
        out << a.array[i];

    return out;

}

istream &operator >> (istream &out, HugeInt &a) { /* nothing here */ }

/********************Comparison Operator Overloads********************/

bool HugeInt::operator == (const HugeInt &a) const {

    int count = 0;

    for (int i = 0; i < sizeMax; i++)
        if(array[i] != a.array[i])
            count++;

    if (count == 0)
        return true;
    else 
        return false;

}

bool HugeInt::operator != (const HugeInt &a) const {

    int count = 0;

    for (int i = 0; i < sizeMax; i++)
        if(array[i] != a.array[i])
            count++;

    if (count != 0)
        return true;
    else 
        return false;

}

bool HugeInt::operator > (const HugeInt &a) const {

    int count = 0;

    for (int i = 0; i < sizeMax; i++)
        if (array[i] > a.array[i])
            count++;
    else if (array[i] < a.array[i])
	    break;
	    
    if (count > 0)
        return true;
    else 
        return false;

}

bool HugeInt::operator < (const HugeInt &a) const {

    int count = 0;

    for (int i = 0; i < sizeMax; i++)
        if (array[i] < a.array[i])
            count++;
    else if (array[i] > a.array[i])
	    break;
	    
    if(count > 0)
        return true;
    else 
        return false;

}

/********************Arithmetic Operator Overloads********************/

HugeInt HugeInt::operator + (const HugeInt &a) { return add(a); }

HugeInt HugeInt::operator - (const HugeInt &a) { return subtract(a); }

HugeInt HugeInt::operator * (const HugeInt &a) { return multiply(a); }

/************************Arithmetic Algorithms************************/

HugeInt HugeInt::add (const HugeInt &a) {

    HugeInt result;
    int carry = 0;

    for (int i = sizeMax - 1; i > 0;  i--) {
        result.array[i] = (array[i] + a.array[i] + carry) % 10;
        carry = (array[i] + a.array[i] + carry) / 10;
    }
    
    return result;

}

HugeInt HugeInt::subtract (const HugeInt &a) {

    HugeInt result;
    int borrow = 0;

    for (int i = sizeMax - 1; i > 0;  i--) {
        result.array[i] = a.array[i] - array[i] - borrow;
	if (a.array[i] - array[i] < 0) {
        result.array[i] = result.array[i] + 10;
        borrow = 1;
    }
	else
	    borrow = 0;
    }
    return result;

}

HugeInt HugeInt::multiply (const HugeInt &a) { /* don't know algorithm */ }

/****************************I/O Functions****************************/

HugeInt HugeInt::input (char last) {
  
    char a;
 
    //Input characters and convert to integers
    while ((a = cin.get()) != last) {
        if (a >= '0' && a <= '9') {
            array[size] = atoi(&a);
            size++;
        }
     }

    //Check for fencepost error
    for (int i = sizeMax - 1; i >= sizeMax - size; i--)
        array[i] = array[i - sizeMax + size];
    for (int j = 0; j < sizeMax - size; j++)
        array[j] = 0;
       
}

HugeInt HugeInt::print () {

    bool term = false;
    int count;

     //Remove excess zeroes
    for (int i = 0; i < sizeMax; i++) {
        if (array[i] != 0) {
            term = true;
            count = i;
            break;
        }
    } //Don't know how to make it print if HugeInt obj = 0

    //Output remaining array indices
    for (int i = count; i < sizeMax; i++)
        cout<<array[i];

}]0;caleb@laptop: ~/Data Structures/Lab1caleb@laptop:~/Data Structures/Lab1$ cat main.cc
/**********************************************************************
* Name: Caleb Faruki
* Lab1: Huge Integer
* Course: Data Structures
* Date: June 11, 2013
* File: HugeInt Main Function
**********************************************************************/
#include "HugeInt.h"
#include <iostream>
#include <cstdlib>
#include <iomanip>

using namespace std;

int main() {

    cout << "|***************|ADDITION|****************|" << endl;

    int addArray1[5] = {3,8,9,5,4};
    int addArray2[3] = {2,3,6};

    HugeInt addOp1(addArray1, 5);
    HugeInt addOp2(addArray2, 3);
    HugeInt addResult1;
    
    cout << "\nFirst Addition Operation:\n" << endl;

    if (addOp1 == addOp2)
        cout << addOp1 << " == " << addOp2 << endl;
    else if (addOp1 != addOp2) {
        cout << addOp1 << " != " << addOp2 << endl;
        if (addOp1 > addOp2)
            cout << addOp1 << " > " << addOp2 << endl;
        else if (addOp1 < addOp2)
            cout << addOp1 << " < " << addOp2 << endl;
    }

    addResult1 = addOp1 + addOp2;
    cout << addOp1 << " + " << addOp2 << " = " << addResult1 << endl;

    int addArray3[2] = {4,2};
    int addArray4[4] = {8,9,5,5};

    HugeInt addOp3(addArray3, 2);
    HugeInt addOp4(addArray4, 4);
    HugeInt addResult2;

    cout << "\nSecond Addition Operation:\n" << endl;

    if (addOp3 == addOp4)
        cout << addOp3 << " == " << addOp4 << endl;
    else if (addOp3 != addOp4) {
        cout << addOp3 << " != " << addOp4 << endl;
        if (addOp3 > addOp4)
            cout << addOp3 << " > " << addOp4 << endl;
        else if (addOp3 < addOp4)
            cout << addOp3 << " < " << addOp4 << endl;
    }

    addResult2 = addOp3 + addOp4;
    cout << addOp3 << " + " << addOp4 << " = " << addResult2 << endl;

    int addArray5[4] = {0,3,6,6};
    int addArray6[3] = {3,6,6};

    HugeInt addOp5(addArray5, 4);
    HugeInt addOp6(addArray6, 3);
    HugeInt addResult3;

    cout << "\nThird Addition Operation:\n" << endl;

    if (addOp5 == addOp6)
        cout << addOp5 << " == " << addOp6 << endl;
    else if (addOp5 != addOp6) {
        cout << addOp5 << " != " << addOp6 << endl;
        if (addOp5 > addOp6)
            cout << addOp5 << " > " << addOp6 << endl;
        else if (addOp5 < addOp6)
            cout << addOp5 << " < " << addOp6 << endl;
    }

    addResult3 = addOp5 + addOp6;
    cout << addOp5 << " + " << addOp6 << " = " << addResult3 << endl << endl;

    cout << "|**************|SUBTRACTION|**************|" << endl;

    int subArray1[6] = {4,5,6,7,8,9};
    int subArray2[7] = {0,4,5,6,7,8,9};

    HugeInt subOp1(subArray1, 6);
    HugeInt subOp2(subArray2, 7);
    HugeInt subResult1;

    cout << "\nFirst Subtraction Operation:\n" << endl;

    if (subOp1 == subOp2)
        cout << subOp1 << " == " << subOp2 << endl;
    else if (subOp1 != subOp2) {
        cout << subOp1 << " != " << subOp2 << endl;
        if (subOp1 > subOp2)
            cout << subOp1 << " > " << subOp2 << endl;
        else if (subOp1 < subOp2)
            cout << subOp1 << " < " << subOp2 << endl;
    }

    subResult1 = subOp2 - subOp1;
    cout << subOp1 << " - " << subOp2 << " = " << subResult1 << endl;

    int subArray3[3] = {8,2,0};
    int subArray4[2] = {8,2};

    HugeInt subOp3(subArray3, 3);
    HugeInt subOp4(subArray4, 2);
    HugeInt subResult2;

    cout << "\nSecond Subtraction Operation:\n" << endl;

    if (subOp3 == subOp4)
        cout << subOp3 << " == " << subOp4 << endl;
    else if (subOp3 != subOp4) {
        cout << subOp3 << " != " << subOp4 << endl;
        if (subOp3 > subOp4)
            cout << subOp3 << " > " << subOp4 << endl;
        else if (subOp3 < subOp4)
            cout << subOp3 << " < " << subOp4 << endl;
    }

    subResult2 = subOp4 - subOp3;
    cout << subOp4 << " - " << subOp3 << " = " << subResult2 << endl;

    int subArray5[4] = {4,4,4,4};
    int subArray6[4] = {3,4,4,4};

    HugeInt subOp5(subArray5, 4);
    HugeInt subOp6(subArray6, 4);
    HugeInt subResult3;

    cout << "\nThird Subtraction Operation:\n" << endl;

    if (subOp5 == subOp6)
        cout << subOp5 << " == " << subOp6 << endl;
    else if (subOp5 != subOp6) {
        cout << subOp5 << " != " << subOp6 << endl;
        if (subOp5 > subOp6)
            cout << subOp5 << " > " << subOp6 << endl;
        else if (subOp5 < subOp6)
            cout << subOp5 << " < " << subOp6 << endl;
    }

    subResult3 = subOp6 - subOp5;
    cout << subOp5 << " - " << subOp6 << " = " << subResult3 << endl << endl;

}]0;caleb@laptop: ~/Data Structures/Lab1caleb@laptop:~/Data Structures/Lab1$ ./HugeInt 
|***************|ADDITION|****************|

First Addition Operation:

38954 != 236
38954 > 236
38954 + 236 = 39190

Second Addition Operation:

42 != 8955
42 < 8955
42 + 8955 = 8997

Third Addition Operation:

366 == 366
366 + 366 = 732

|**************|SUBTRACTION|**************|

First Subtraction Operation:

456789 == 456789
456789 - 456789 = 

Second Subtraction Operation:

820 != 82
820 > 82
82 - 820 = 738

Third Subtraction Operation:

4444 != 3444
4444 > 3444
4444 - 3444 = 1000

]0;caleb@laptop: ~/Data Structures/Lab1caleb@laptop:~/Data Structures/Lab1$ exit
exit

Script done on Wed 12 Jun 2013 02:54:57 AM EDT
