Script started on Wed 19 Jun 2013 12:39:41 PM EDT
]0;caleb@laptop: ~/Data Structures/Lab2caleb@laptop:~/Data Structures/Lab2$ cat Array.h
/************************************************************************
 * Name: Caleb Faruki
 * Lab2: Array Implementation
 * Course: Data Structures
 * Date: June 19, 2013
 * File: Array Header File
 ************************************************************************/

#ifndef ARRAY_H
#define ARRAY_H

#include <iostream>

using namespace std;

class Array {

    friend istream & operator>>( istream & in, Array & a ) {
	   a.input();
	   return in;
    }

    friend ostream & operator<<( ostream & out, const Array & a ) {
	   a.output();
	   return out;
    }

public:

    Array ();   // Default constructor
    Array ( int );   // New constructor
    Array ( const Array & );   // Copy constructor
    ~Array ();   // Destructor.

    // Operator overload prototypes.
    const Array & operator=( const Array & );
    const bool operator==( const Array & );
    const bool operator!=( const Array & );

    int & operator[]( int );	// Left hand operator.
    int operator[]( int ) const;	// Right hand operator.

private:

    // Member function prototypes
    bool isEqual ( const Array & );
    void input();
    void output() const;

    static const int DEFAULTSIZE = 10; // Set default array size.
    static const int MAXSIZE = 100; // Set maximum array size.
    static const int DEFAULTVALUE = 0; // Set value of array elements.
    int size;
    int * arr;

};

#endif]0;caleb@laptop: ~/Data Structures/Lab2caleb@laptop:~/Data Structures/Lab2$ cat Array.cc
/************************************************************************
 * Name: Caleb Faruki
 * Lab2: Array Implementation
 * Course: Data Structures
 * Date: June 19, 2013
 * File: Array Implementation File
 ************************************************************************/

#include "Array.h"

/****************************Constructors*****************************/

// Default constructor
Array::Array() {

    size = DEFAULTSIZE;
    arr = new int [size]; 	// Allocate memory for array[DEFAULTSIZE].

    for (int i = 0; i < size; i++) 
        arr[i] = DEFAULTVALUE;  // Set all elements to DEFAULTVALUE.
    
}

// New constructor
Array::Array( int a ) {

    if (a < 1)
        size = DEFAULTSIZE; // Can't allocate array of <= 0 elements.
    else if (a > MAXSIZE)
        size = MAXSIZE; // Array can be no larger than 100 elements.
    else
        size = a;   // Valid argument, passed to size.

    arr = new int [size];

    for (int i = 0; i < size; i++) 
        arr[i] = DEFAULTVALUE;  // Set all elements to DEFAULTVALUE.
    
}

// Copy constructor
Array::Array( const Array & b ) { // If argument is array, copy.

    size = b.size;
    arr = new int [size]; // Set size to argument's array size.

    for (int i = 0; i < size; i++)
        arr[i] = b.arr[i]; // Copy elements.

}

// Destructor
Array::~Array () {

    for (int i = 0; i < size; i++) {
        delete arr; // Deallocate memory.
        arr = NULL; // Delete array elements.
    }

}

/*************************Operator Overloads**************************/

const Array & Array::operator=( const Array & b ) {

    delete arr; // Delete original array.
    size = b.size; // Reset size to argument's array size.
    arr = new int [size]; // Create new array of b's size.

    for (int i = 0; i < size; i++) 
        arr[i] = b.arr[i]; // Copy argument elements into new array.

    return * this; // Return value of object currently being used.

}

const bool Array::operator == ( const Array & b ) { return isEqual(b); }

const bool Array::operator != ( const Array & b ) { return isEqual(b); }

// Overload [] operator for lvalue.
int & Array::operator [] ( int a ) { return arr[a]; }

// Overload [] operator for rvalue.
int Array::operator [] ( int a ) const { return arr[a]; }

/***************************Member Functions**************************/

// Checks equality as subroutine of == & != operators
bool Array::isEqual ( const Array & b ) {

    if (size != b.size)
        return false;   // Returns != if array sizes differ.

    for (int i = 0; i < size; i++)
        if (arr[i] != b.arr[i])
            return false;   // Returns != if array contents differ.

    return true;    // Else, it returns ==.

}

void Array::input () {

    for (int i = 0; i < size; i++) {
	   cout << " Value of element(" << i+1 << "/" << size << "):";
	   cin >> arr[i];
    }

}

void Array::output () const {

    cout << "{ ";

    for (int i = 0; i < size; i++)
        cout << arr[i] << ' ';

    cout << "}" << endl;

}]0;caleb@laptop: ~/Data Structures/Lab2caleb@laptop:~/Data Structures/Lab2$ cat main.cc
/************************************************************************
 * Name: Caleb Faruki
 * Lab2: Array Implementation
 * Course: Data Structures
 * Date: June 19, 2013
 * File: Array Main Function
 ************************************************************************/

#include "Array.h"

int main () {

    int arrSize;
    cout << "Specify size of arrOne & arrTwo: ";
    cin >> arrSize;
    cout << endl;

    Array arrOne(arrSize); // New constructor called for arrOne
    Array arrTwo(arrOne); // Copy constructor called for arrTwo
    
    // Print contents of both arrays (all elements == DEFAULTVALUE).
    cout << "Printing contents of both arrays: " << endl 
         << "arrOne[size==" << arrSize << "]: " << arrOne 
         << "arrTwo[size==" << arrSize << "]: " << arrTwo;

    // Show that copy constructor works.
    if (arrOne == arrTwo)
        cout << "arrOne == arrTwo.\n" << endl;
    
    // Set value of 1st element to arrSize.
    arrOne[0] = arrSize;
    cout << "Now, arrOne[0] == " << arrOne[0] << endl << endl;
    
    // Manually set all values for arrTwo.
    cout << "Now enter elements for arrTwo." << endl;
    cin >> arrTwo;
    cout << endl;
    
    // Print contents of both arrays.
    cout << "Printing contents of both arrays:\n" << "arrOne: " 
         << arrOne << "arrTwo: " << arrTwo;
    
    // Check equality of arrOne & arrTwo.
    if (arrOne == arrTwo)
        cout << "arrOne == arrTwo.\n" << endl;
    else 
        cout << "arrOne != arrTwo.\n" << endl;

	return 0;

}]0;caleb@laptop: ~/Data Structures/Lab2caleb@laptop:~/Data Structures/Lab2$ g++ Array.cc main.cc
]0;caleb@laptop: ~/Data Structures/Lab2caleb@laptop:~/Data Structures/Lab2$ ./a.out
Specify size of arrOne & arrTwo: 5

Printing contents of both arrays: 
arrOne[size==5]: { 0 0 0 0 0 }
arrTwo[size==5]: { 0 0 0 0 0 }
arrOne == arrTwo.

Now, arrOne[0] == 5

Now enter elements for arrTwo.
 Value of element(1/5):5
 Value of element(2/5):4
 Value of element(3/5):3
 Value of element(4/5):2
 Value of element(5/5):1

Printing contents of both arrays:
arrOne: { 5 0 0 0 0 }
arrTwo: { 5 4 3 2 1 }
arrOne != arrTwo.

]0;caleb@laptop: ~/Data Structures/Lab2caleb@laptop:~/Data Structures/Lab2$ exit
exit

Script done on Wed 19 Jun 2013 12:40:14 PM EDT
